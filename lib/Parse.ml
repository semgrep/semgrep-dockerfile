(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_dockerfile"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "line_continuation";
]

let children_regexps : (string * Run.exp option) list = [
  "imm_tok_pat_f6e1de8", None;
  "pat_as", None;
  "single_quoted_escape_sequence", None;
  "semgrep_metavariable", None;
  "imm_tok_pat_f46f69d", None;
  "imm_tok_comma", None;
  "semgrep_ellipsis", None;
  "pat_cmd", None;
  "pat_from", None;
  "json_escape_sequence", None;
  "pat_arg", None;
  "imm_tok_dollar", None;
  "required_line_continuation", None;
  "pat_217c202", None;
  "pat_stop", None;
  "imm_tok_pat_9f6bbb9", None;
  "pat_add", None;
  "pat_b1120d3", None;
  "pat_9a14b5c", None;
  "pat_2b6adbc", None;
  "pat_run", None;
  "imm_tok_pat_0c7fc22", None;
  "pat_8165e5f", None;
  "pat_1167a92", None;
  "pat_eda9032", None;
  "pat_volume", None;
  "double_quoted_escape_sequence", None;
  "imm_tok_rcurl", None;
  "imm_tok_eq", None;
  "pat_heal", None;
  "imm_tok_pat_441cd81", None;
  "pat_05444c2", None;
  "variable", None;
  "imm_tok_at", None;
  "imm_tok_pat_3a2a380", None;
  "pat_env", None;
  "pat_dea634e", None;
  "imm_tok_mount", None;
  "pat_4de4cb9", None;
  "pat_4fd4a56", None;
  "imm_tok_pat_f43f746", None;
  "pat_4128122", None;
  "imm_tok_bslashspace", None;
  "non_newline_whitespace", None;
  "imm_tok_pat_d2727a0", None;
  "pat_4a2f38a", None;
  "imm_tok_pat_9a14b5c", None;
  "comment", None;
  "pat_label", None;
  "pat_user", None;
  "pat_441cd81", None;
  "pat_work", None;
  "imm_tok_lcurl", None;
  "imm_tok_pat_2b37705", None;
  "pat_onbu", None;
  "imm_tok_pat_589b0f8", None;
  "pat_shell", None;
  "pat_main", None;
  "imm_tok_pat_7642c4f", None;
  "imm_tok_pat_bcfc287", None;
  "imm_tok_pat_3d340f6", None;
  "pat_copy", None;
  "pat_expose", None;
  "imm_tok_pat_0ab9261", None;
  "imm_tok_colon", None;
  "imm_tok_pat_8713919", None;
  "pat_entr", None;
  "expose_port",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Seq [
        Token (Name "pat_217c202");
        Opt (
          Alt [|
            Token (Literal "/tcp");
            Token (Literal "/udp");
          |];
        );
      ];
    |];
  );
  "env_key", Some (Token (Name "pat_2b6adbc"););
  "mount_param_param",
  Some (
    Seq [
      Token (Name "imm_tok_pat_f46f69d");
      Token (Name "imm_tok_eq");
      Token (Name "imm_tok_pat_f46f69d");
    ];
  );
  "json_string",
  Some (
    Seq [
      Token (Literal "\"");
      Repeat (
        Alt [|
          Token (Name "imm_tok_pat_3a2a380");
          Token (Name "json_escape_sequence");
        |];
      );
      Token (Literal "\"");
    ];
  );
  "shell_fragment",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "pat_b1120d3");
        Token (Name "pat_dea634e");
        Token (Name "pat_eda9032");
      |];
    );
  );
  "anon_comment",
  Some (
    Seq [
      Token (Literal "#");
      Token (Name "pat_4fd4a56");
    ];
  );
  "param",
  Some (
    Seq [
      Token (Literal "--");
      Token (Name "imm_tok_pat_f43f746");
      Token (Name "imm_tok_eq");
      Token (Name "imm_tok_pat_f6e1de8");
    ];
  );
  "cross_build_instruction",
  Some (
    Seq [
      Token (Name "pat_4a2f38a");
      Token (Name "pat_4fd4a56");
    ];
  );
  "maintainer_instruction",
  Some (
    Seq [
      Token (Name "pat_main");
      Token (Name "pat_4fd4a56");
    ];
  );
  "single_quoted_string",
  Some (
    Seq [
      Token (Literal "'");
      Repeat (
        Alt [|
          Token (Name "imm_tok_pat_0ab9261");
          Token (Name "single_quoted_escape_sequence");
          Token (Literal "\\");
        |];
      );
      Token (Literal "'");
    ];
  );
  "expansion_body",
  Some (
    Alt [|
      Token (Name "variable");
      Seq [
        Token (Name "imm_tok_lcurl");
        Token (Name "imm_tok_pat_8713919");
        Token (Name "imm_tok_rcurl");
      ];
    |];
  );
  "mount_param",
  Some (
    Seq [
      Token (Literal "--");
      Token (Name "imm_tok_mount");
      Token (Name "imm_tok_eq");
      Token (Name "mount_param_param");
      Repeat (
        Seq [
          Token (Name "imm_tok_comma");
          Token (Name "mount_param_param");
        ];
      );
    ];
  );
  "array_element",
  Some (
    Alt [|
      Token (Name "json_string");
      Token (Name "semgrep_ellipsis");
      Token (Name "semgrep_metavariable");
    |];
  );
  "comment_line",
  Some (
    Seq [
      Token (Name "anon_comment");
      Token (Literal "\n");
    ];
  );
  "expansion",
  Some (
    Seq [
      Token (Literal "$");
      Token (Name "expansion_body");
    ];
  );
  "imm_expansion",
  Some (
    Seq [
      Token (Name "imm_tok_dollar");
      Token (Name "expansion_body");
    ];
  );
  "json_string_array",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Token (Name "array_element");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "array_element");
            ];
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "shell_command",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Seq [
        Repeat (
          Token (Name "comment_line");
        );
        Token (Name "shell_fragment");
        Repeat (
          Seq [
            Token (Name "required_line_continuation");
            Repeat (
              Token (Name "comment_line");
            );
            Token (Name "shell_fragment");
          ];
        );
      ];
    |];
  );
  "expose_instruction",
  Some (
    Seq [
      Token (Name "pat_expose");
      Repeat1 (
        Alt [|
          Token (Name "expose_port");
          Token (Name "expansion");
        |];
      );
    ];
  );
  "immediate_expansion", Some (Token (Name "imm_expansion"););
  "shell_instruction",
  Some (
    Seq [
      Token (Name "pat_shell");
      Token (Name "json_string_array");
    ];
  );
  "cmd_instruction",
  Some (
    Seq [
      Token (Name "pat_cmd");
      Alt [|
        Token (Name "json_string_array");
        Token (Name "shell_command");
      |];
    ];
  );
  "run_instruction",
  Some (
    Seq [
      Token (Name "pat_run");
      Repeat (
        Alt [|
          Token (Name "param");
          Token (Name "mount_param");
        |];
      );
      Alt [|
        Token (Name "json_string_array");
        Token (Name "shell_command");
      |];
    ];
  );
  "entrypoint_instruction",
  Some (
    Seq [
      Token (Name "pat_entr");
      Alt [|
        Token (Name "json_string_array");
        Token (Name "shell_command");
      |];
    ];
  );
  "image_tag",
  Some (
    Seq [
      Token (Name "imm_tok_colon");
      Repeat1 (
        Alt [|
          Token (Name "imm_tok_pat_bcfc287");
          Token (Name "immediate_expansion");
        |];
      );
    ];
  );
  "immediate_user_name_or_group_fragment",
  Some (
    Alt [|
      Token (Name "imm_tok_pat_7642c4f");
      Token (Name "immediate_expansion");
    |];
  );
  "image_name",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_8165e5f");
        Token (Name "expansion");
      |];
      Repeat (
        Alt [|
          Token (Name "imm_tok_pat_2b37705");
          Token (Name "immediate_expansion");
        |];
      );
    ];
  );
  "image_alias",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_9a14b5c");
        Token (Name "expansion");
      |];
      Repeat (
        Alt [|
          Token (Name "imm_tok_pat_9a14b5c");
          Token (Name "immediate_expansion");
        |];
      );
    ];
  );
  "path",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_1167a92");
        Token (Name "expansion");
      |];
      Repeat (
        Alt [|
          Token (Name "imm_tok_pat_0c7fc22");
          Token (Name "immediate_expansion");
        |];
      );
    ];
  );
  "stopsignal_value",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_441cd81");
        Token (Name "expansion");
      |];
      Repeat (
        Alt [|
          Token (Name "imm_tok_pat_441cd81");
          Token (Name "immediate_expansion");
        |];
      );
    ];
  );
  "image_digest",
  Some (
    Seq [
      Token (Name "imm_tok_at");
      Repeat1 (
        Alt [|
          Token (Name "imm_tok_pat_d2727a0");
          Token (Name "immediate_expansion");
        |];
      );
    ];
  );
  "unquoted_string",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "imm_tok_pat_9f6bbb9");
        Token (Name "imm_tok_bslashspace");
        Token (Name "immediate_expansion");
      |];
    );
  );
  "double_quoted_string",
  Some (
    Seq [
      Token (Literal "\"");
      Repeat (
        Alt [|
          Token (Name "imm_tok_pat_589b0f8");
          Token (Name "double_quoted_escape_sequence");
          Token (Literal "\\");
          Token (Name "immediate_expansion");
        |];
      );
      Token (Literal "\"");
    ];
  );
  "healthcheck_instruction",
  Some (
    Seq [
      Token (Name "pat_heal");
      Alt [|
        Token (Name "semgrep_metavariable");
        Token (Literal "NONE");
        Seq [
          Repeat (
            Token (Name "param");
          );
          Token (Name "cmd_instruction");
        ];
      |];
    ];
  );
  "user_name_or_group",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_05444c2");
        Token (Name "expansion");
      |];
      Repeat (
        Token (Name "immediate_user_name_or_group_fragment");
      );
    ];
  );
  "immediate_user_name_or_group",
  Some (
    Repeat1 (
      Token (Name "immediate_user_name_or_group_fragment");
    );
  );
  "volume_instruction",
  Some (
    Seq [
      Token (Name "pat_volume");
      Alt [|
        Token (Name "json_string_array");
        Seq [
          Token (Name "path");
          Repeat (
            Seq [
              Token (Name "non_newline_whitespace");
              Token (Name "path");
            ];
          );
        ];
      |];
    ];
  );
  "workdir_instruction",
  Some (
    Seq [
      Token (Name "pat_work");
      Token (Name "path");
    ];
  );
  "add_instruction",
  Some (
    Seq [
      Token (Name "pat_add");
      Opt (
        Token (Name "param");
      );
      Repeat1 (
        Seq [
          Token (Name "path");
          Token (Name "non_newline_whitespace");
        ];
      );
      Token (Name "path");
    ];
  );
  "copy_instruction",
  Some (
    Seq [
      Token (Name "pat_copy");
      Opt (
        Token (Name "param");
      );
      Repeat1 (
        Seq [
          Token (Name "path");
          Token (Name "non_newline_whitespace");
        ];
      );
      Token (Name "path");
    ];
  );
  "stopsignal_instruction",
  Some (
    Seq [
      Token (Name "pat_stop");
      Token (Name "stopsignal_value");
    ];
  );
  "image_spec",
  Some (
    Seq [
      Token (Name "image_name");
      Opt (
        Token (Name "image_tag");
      );
      Opt (
        Token (Name "image_digest");
      );
    ];
  );
  "env_pair",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Seq [
        Token (Name "env_key");
        Token (Name "imm_tok_eq");
        Opt (
          Alt [|
            Token (Name "double_quoted_string");
            Token (Name "single_quoted_string");
            Token (Name "unquoted_string");
          |];
        );
      ];
    |];
  );
  "spaced_env_pair",
  Some (
    Seq [
      Token (Name "env_key");
      Token (Name "imm_tok_pat_3d340f6");
      Alt [|
        Token (Name "double_quoted_string");
        Token (Name "single_quoted_string");
        Token (Name "unquoted_string");
      |];
    ];
  );
  "label_pair",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Seq [
        Alt [|
          Token (Name "semgrep_metavariable");
          Token (Name "pat_4128122");
        |];
        Token (Name "imm_tok_eq");
        Alt [|
          Token (Name "double_quoted_string");
          Token (Name "unquoted_string");
        |];
      ];
    |];
  );
  "arg_instruction",
  Some (
    Seq [
      Token (Name "pat_arg");
      Alt [|
        Token (Name "semgrep_metavariable");
        Token (Name "pat_4de4cb9");
      |];
      Opt (
        Seq [
          Token (Name "imm_tok_eq");
          Alt [|
            Token (Name "double_quoted_string");
            Token (Name "unquoted_string");
          |];
        ];
      );
    ];
  );
  "user_instruction",
  Some (
    Seq [
      Token (Name "pat_user");
      Token (Name "user_name_or_group");
      Opt (
        Seq [
          Token (Name "imm_tok_colon");
          Token (Name "immediate_user_name_or_group");
        ];
      );
    ];
  );
  "from_instruction",
  Some (
    Seq [
      Token (Name "pat_from");
      Opt (
        Token (Name "param");
      );
      Token (Name "image_spec");
      Opt (
        Seq [
          Token (Name "pat_as");
          Token (Name "image_alias");
        ];
      );
    ];
  );
  "env_instruction",
  Some (
    Seq [
      Token (Name "pat_env");
      Alt [|
        Repeat1 (
          Token (Name "env_pair");
        );
        Token (Name "spaced_env_pair");
      |];
    ];
  );
  "label_instruction",
  Some (
    Seq [
      Token (Name "pat_label");
      Repeat1 (
        Token (Name "label_pair");
      );
    ];
  );
  "instruction",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Token (Name "semgrep_metavariable");
      Alt [|
        Token (Name "from_instruction");
        Token (Name "run_instruction");
        Token (Name "cmd_instruction");
        Token (Name "label_instruction");
        Token (Name "expose_instruction");
        Token (Name "env_instruction");
        Token (Name "add_instruction");
        Token (Name "copy_instruction");
        Token (Name "entrypoint_instruction");
        Token (Name "volume_instruction");
        Token (Name "user_instruction");
        Token (Name "workdir_instruction");
        Token (Name "arg_instruction");
        Token (Name "onbuild_instruction");
        Token (Name "stopsignal_instruction");
        Token (Name "healthcheck_instruction");
        Token (Name "shell_instruction");
        Token (Name "maintainer_instruction");
        Token (Name "cross_build_instruction");
      |];
    |];
  );
  "onbuild_instruction",
  Some (
    Seq [
      Token (Name "pat_onbu");
      Token (Name "instruction");
    ];
  );
  "source_file",
  Some (
    Repeat (
      Seq [
        Alt [|
          Token (Name "instruction");
          Token (Name "comment");
        |];
        Token (Literal "\n");
      ];
    );
  );
]

let trans_imm_tok_pat_f6e1de8 ((kind, body) : mt) : CST.imm_tok_pat_f6e1de8 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_as ((kind, body) : mt) : CST.pat_as =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_single_quoted_escape_sequence ((kind, body) : mt) : CST.single_quoted_escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_metavariable ((kind, body) : mt) : CST.semgrep_metavariable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_f46f69d ((kind, body) : mt) : CST.imm_tok_pat_f46f69d =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_comma ((kind, body) : mt) : CST.imm_tok_comma =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_ellipsis ((kind, body) : mt) : CST.semgrep_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_cmd ((kind, body) : mt) : CST.pat_cmd =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_from ((kind, body) : mt) : CST.pat_from =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_json_escape_sequence ((kind, body) : mt) : CST.json_escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_arg ((kind, body) : mt) : CST.pat_arg =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_dollar ((kind, body) : mt) : CST.imm_tok_dollar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_required_line_continuation ((kind, body) : mt) : CST.required_line_continuation =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_217c202 ((kind, body) : mt) : CST.pat_217c202 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_stop ((kind, body) : mt) : CST.pat_stop =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_9f6bbb9 ((kind, body) : mt) : CST.imm_tok_pat_9f6bbb9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_add ((kind, body) : mt) : CST.pat_add =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_b1120d3 ((kind, body) : mt) : CST.pat_b1120d3 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_9a14b5c ((kind, body) : mt) : CST.pat_9a14b5c =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_2b6adbc ((kind, body) : mt) : CST.pat_2b6adbc =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_run ((kind, body) : mt) : CST.pat_run =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_0c7fc22 ((kind, body) : mt) : CST.imm_tok_pat_0c7fc22 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_8165e5f ((kind, body) : mt) : CST.pat_8165e5f =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_1167a92 ((kind, body) : mt) : CST.pat_1167a92 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_eda9032 ((kind, body) : mt) : CST.pat_eda9032 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_volume ((kind, body) : mt) : CST.pat_volume =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_double_quoted_escape_sequence ((kind, body) : mt) : CST.double_quoted_escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_rcurl ((kind, body) : mt) : CST.imm_tok_rcurl =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_eq ((kind, body) : mt) : CST.imm_tok_eq =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_heal ((kind, body) : mt) : CST.pat_heal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_441cd81 ((kind, body) : mt) : CST.imm_tok_pat_441cd81 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_05444c2 ((kind, body) : mt) : CST.pat_05444c2 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_variable ((kind, body) : mt) : CST.variable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_at ((kind, body) : mt) : CST.imm_tok_at =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_3a2a380 ((kind, body) : mt) : CST.imm_tok_pat_3a2a380 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_pat_env ((kind, body) : mt) : CST.pat_env =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_dea634e ((kind, body) : mt) : CST.pat_dea634e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_mount ((kind, body) : mt) : CST.imm_tok_mount =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4de4cb9 ((kind, body) : mt) : CST.pat_4de4cb9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4fd4a56 ((kind, body) : mt) : CST.pat_4fd4a56 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_f43f746 ((kind, body) : mt) : CST.imm_tok_pat_f43f746 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4128122 ((kind, body) : mt) : CST.pat_4128122 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_bslashspace ((kind, body) : mt) : CST.imm_tok_bslashspace =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_non_newline_whitespace ((kind, body) : mt) : CST.non_newline_whitespace =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_d2727a0 ((kind, body) : mt) : CST.imm_tok_pat_d2727a0 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_4a2f38a ((kind, body) : mt) : CST.pat_4a2f38a =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_9a14b5c ((kind, body) : mt) : CST.imm_tok_pat_9a14b5c =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_label ((kind, body) : mt) : CST.pat_label =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_user ((kind, body) : mt) : CST.pat_user =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_441cd81 ((kind, body) : mt) : CST.pat_441cd81 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_work ((kind, body) : mt) : CST.pat_work =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_lcurl ((kind, body) : mt) : CST.imm_tok_lcurl =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_2b37705 ((kind, body) : mt) : CST.imm_tok_pat_2b37705 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_onbu ((kind, body) : mt) : CST.pat_onbu =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_589b0f8 ((kind, body) : mt) : CST.imm_tok_pat_589b0f8 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_shell ((kind, body) : mt) : CST.pat_shell =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_main ((kind, body) : mt) : CST.pat_main =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_7642c4f ((kind, body) : mt) : CST.imm_tok_pat_7642c4f =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_bcfc287 ((kind, body) : mt) : CST.imm_tok_pat_bcfc287 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_3d340f6 ((kind, body) : mt) : CST.imm_tok_pat_3d340f6 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_copy ((kind, body) : mt) : CST.pat_copy =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_expose ((kind, body) : mt) : CST.pat_expose =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_0ab9261 ((kind, body) : mt) : CST.imm_tok_pat_0ab9261 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_colon ((kind, body) : mt) : CST.imm_tok_colon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_imm_tok_pat_8713919 ((kind, body) : mt) : CST.imm_tok_pat_8713919 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_entr ((kind, body) : mt) : CST.pat_entr =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_expose_port ((kind, body) : mt) : CST.expose_port =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_217c202_opt_choice_SLAS (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_pat_217c202 (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `SLAS_ce91595 (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `SLAS_c773c8d (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_env_key ((kind, body) : mt) : CST.env_key =
  match body with
  | Children v ->
      trans_pat_2b6adbc (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_mount_param_param ((kind, body) : mt) : CST.mount_param_param =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_imm_tok_pat_f46f69d (Run.matcher_token v0),
            trans_imm_tok_eq (Run.matcher_token v1),
            trans_imm_tok_pat_f46f69d (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_json_string ((kind, body) : mt) : CST.json_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_3a2a380 (
                      trans_imm_tok_pat_3a2a380 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Json_esc_seq (
                      trans_json_escape_sequence (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_shell_fragment ((kind, body) : mt) : CST.shell_fragment =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Pat_b1120d3 (
                trans_pat_b1120d3 (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Pat_dea634e (
                trans_pat_dea634e (Run.matcher_token v)
              )
          | Alt (2, v) ->
              `Pat_eda9032 (
                trans_pat_eda9032 (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_anon_comment ((kind, body) : mt) : CST.anon_comment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_pat_4fd4a56 (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_param ((kind, body) : mt) : CST.param =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_imm_tok_pat_f43f746 (Run.matcher_token v1),
            trans_imm_tok_eq (Run.matcher_token v2),
            trans_imm_tok_pat_f6e1de8 (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_cross_build_instruction ((kind, body) : mt) : CST.cross_build_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_4a2f38a (Run.matcher_token v0),
            trans_pat_4fd4a56 (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_maintainer_instruction ((kind, body) : mt) : CST.maintainer_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_main (Run.matcher_token v0),
            trans_pat_4fd4a56 (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_single_quoted_string ((kind, body) : mt) : CST.single_quoted_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_0ab9261 (
                      trans_imm_tok_pat_0ab9261 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Single_quoted_esc_seq (
                      trans_single_quoted_escape_sequence (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `BSLASH (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_expansion_body ((kind, body) : mt) : CST.expansion_body =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Var (
            trans_variable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Imm_tok_lcurl_imm_tok_pat_8713919_imm_tok_rcurl (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_imm_tok_lcurl (Run.matcher_token v0),
                  trans_imm_tok_pat_8713919 (Run.matcher_token v1),
                  trans_imm_tok_rcurl (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_mount_param ((kind, body) : mt) : CST.mount_param =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_imm_tok_mount (Run.matcher_token v1),
            trans_imm_tok_eq (Run.matcher_token v2),
            trans_mount_param_param (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_imm_tok_comma (Run.matcher_token v0),
                      trans_mount_param_param (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_array_element ((kind, body) : mt) : CST.array_element =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Json_str (
            trans_json_string (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_comment_line ((kind, body) : mt) : CST.comment_line =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_anon_comment (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_expansion ((kind, body) : mt) : CST.expansion =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expansion_body (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_imm_expansion ((kind, body) : mt) : CST.imm_expansion =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_imm_tok_dollar (Run.matcher_token v0),
            trans_expansion_body (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_json_string_array ((kind, body) : mt) : CST.json_string_array =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_array_element (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_array_element (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_shell_command ((kind, body) : mt) : CST.shell_command =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Rep_comm_line_shell_frag_rep_requ_line_cont_rep_comm_line_shell_frag (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.repeat
                    (fun v -> trans_comment_line (Run.matcher_token v))
                    v0
                  ,
                  trans_shell_fragment (Run.matcher_token v1),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1; v2] ->
                          (
                            trans_required_line_continuation (Run.matcher_token v0),
                            Run.repeat
                              (fun v -> trans_comment_line (Run.matcher_token v))
                              v1
                            ,
                            trans_shell_fragment (Run.matcher_token v2)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_expose_instruction ((kind, body) : mt) : CST.expose_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_expose (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Expose_port (
                      trans_expose_port (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Expa (
                      trans_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_immediate_expansion ((kind, body) : mt) : CST.immediate_expansion =
  match body with
  | Children v ->
      trans_imm_expansion (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_shell_instruction ((kind, body) : mt) : CST.shell_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_shell (Run.matcher_token v0),
            trans_json_string_array (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_cmd_instruction ((kind, body) : mt) : CST.cmd_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_cmd (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Json_str_array (
                  trans_json_string_array (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Shell_cmd (
                  trans_shell_command (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_run_instruction ((kind, body) : mt) : CST.run_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_run (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Param (
                      trans_param (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Mount_param (
                      trans_mount_param (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Json_str_array (
                  trans_json_string_array (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Shell_cmd (
                  trans_shell_command (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_entrypoint_instruction ((kind, body) : mt) : CST.entrypoint_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_entr (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Json_str_array (
                  trans_json_string_array (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Shell_cmd (
                  trans_shell_command (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_image_tag ((kind, body) : mt) : CST.image_tag =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_imm_tok_colon (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_bcfc287 (
                      trans_imm_tok_pat_bcfc287 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Imme_expa (
                      trans_immediate_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_immediate_user_name_or_group_fragment ((kind, body) : mt) : CST.immediate_user_name_or_group_fragment =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Imm_tok_pat_7642c4f (
            trans_imm_tok_pat_7642c4f (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Imme_expa (
            trans_immediate_expansion (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_image_name ((kind, body) : mt) : CST.image_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_8165e5f (
                  trans_pat_8165e5f (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Expa (
                  trans_expansion (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_2b37705 (
                      trans_imm_tok_pat_2b37705 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Imme_expa (
                      trans_immediate_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_image_alias ((kind, body) : mt) : CST.image_alias =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_9a14b5c (
                  trans_pat_9a14b5c (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Expa (
                  trans_expansion (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_9a14b5c (
                      trans_imm_tok_pat_9a14b5c (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Imme_expa (
                      trans_immediate_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_path ((kind, body) : mt) : CST.path =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_1167a92 (
                  trans_pat_1167a92 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Expa (
                  trans_expansion (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_0c7fc22 (
                      trans_imm_tok_pat_0c7fc22 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Imme_expa (
                      trans_immediate_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_stopsignal_value ((kind, body) : mt) : CST.stopsignal_value =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_441cd81 (
                  trans_pat_441cd81 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Expa (
                  trans_expansion (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_441cd81 (
                      trans_imm_tok_pat_441cd81 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Imme_expa (
                      trans_immediate_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_image_digest ((kind, body) : mt) : CST.image_digest =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_imm_tok_at (Run.matcher_token v0),
            Run.repeat1
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_d2727a0 (
                      trans_imm_tok_pat_d2727a0 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Imme_expa (
                      trans_immediate_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_unquoted_string ((kind, body) : mt) : CST.unquoted_string =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Imm_tok_pat_9f6bbb9 (
                trans_imm_tok_pat_9f6bbb9 (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Imm_tok_bsla (
                trans_imm_tok_bslashspace (Run.matcher_token v)
              )
          | Alt (2, v) ->
              `Imme_expa (
                trans_immediate_expansion (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_double_quoted_string ((kind, body) : mt) : CST.double_quoted_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Imm_tok_pat_589b0f8 (
                      trans_imm_tok_pat_589b0f8 (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Double_quoted_esc_seq (
                      trans_double_quoted_escape_sequence (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `BSLASH (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Imme_expa (
                      trans_immediate_expansion (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_healthcheck_instruction ((kind, body) : mt) : CST.healthcheck_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_heal (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Semg_meta (
                  trans_semgrep_metavariable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `NONE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Rep_param_cmd_inst (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.repeat
                          (fun v -> trans_param (Run.matcher_token v))
                          v0
                        ,
                        trans_cmd_instruction (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_user_name_or_group ((kind, body) : mt) : CST.user_name_or_group =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_05444c2 (
                  trans_pat_05444c2 (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Expa (
                  trans_expansion (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                trans_immediate_user_name_or_group_fragment (Run.matcher_token v)
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_immediate_user_name_or_group ((kind, body) : mt) : CST.immediate_user_name_or_group =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          trans_immediate_user_name_or_group_fragment (Run.matcher_token v)
        )
        v
  | Leaf _ -> assert false

let trans_volume_instruction ((kind, body) : mt) : CST.volume_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_volume (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Json_str_array (
                  trans_json_string_array (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Path_rep_non_nl_whit_path (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_path (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_non_newline_whitespace (Run.matcher_token v0),
                                  trans_path (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_workdir_instruction ((kind, body) : mt) : CST.workdir_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_work (Run.matcher_token v0),
            trans_path (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_add_instruction ((kind, body) : mt) : CST.add_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_add (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_param (Run.matcher_token v))
              v1
            ,
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_path (Run.matcher_token v0),
                      trans_non_newline_whitespace (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_path (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_copy_instruction ((kind, body) : mt) : CST.copy_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_copy (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_param (Run.matcher_token v))
              v1
            ,
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_path (Run.matcher_token v0),
                      trans_non_newline_whitespace (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_path (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_stopsignal_instruction ((kind, body) : mt) : CST.stopsignal_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_stop (Run.matcher_token v0),
            trans_stopsignal_value (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_image_spec ((kind, body) : mt) : CST.image_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_image_name (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_image_tag (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_image_digest (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_env_pair ((kind, body) : mt) : CST.env_pair =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Env_key_imm_tok_eq_opt_choice_double_quoted_str (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_env_key (Run.matcher_token v0),
                  trans_imm_tok_eq (Run.matcher_token v1),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Double_quoted_str (
                            trans_double_quoted_string (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Single_quoted_str (
                            trans_single_quoted_string (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Unqu_str (
                            trans_unquoted_string (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_spaced_env_pair ((kind, body) : mt) : CST.spaced_env_pair =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_env_key (Run.matcher_token v0),
            trans_imm_tok_pat_3d340f6 (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Double_quoted_str (
                  trans_double_quoted_string (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Single_quoted_str (
                  trans_single_quoted_string (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Unqu_str (
                  trans_unquoted_string (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_pair ((kind, body) : mt) : CST.label_pair =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_semg_meta_imm_tok_eq_choice_double_quoted_str (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Semg_meta (
                        trans_semgrep_metavariable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Pat_4128122 (
                        trans_pat_4128122 (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_imm_tok_eq (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Double_quoted_str (
                        trans_double_quoted_string (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Unqu_str (
                        trans_unquoted_string (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_arg_instruction ((kind, body) : mt) : CST.arg_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_arg (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Semg_meta (
                  trans_semgrep_metavariable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_4de4cb9 (
                  trans_pat_4de4cb9 (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_imm_tok_eq (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Double_quoted_str (
                            trans_double_quoted_string (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Unqu_str (
                            trans_unquoted_string (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_user_instruction ((kind, body) : mt) : CST.user_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat_user (Run.matcher_token v0),
            trans_user_name_or_group (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_imm_tok_colon (Run.matcher_token v0),
                      trans_immediate_user_name_or_group (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_from_instruction ((kind, body) : mt) : CST.from_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_pat_from (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_param (Run.matcher_token v))
              v1
            ,
            trans_image_spec (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_pat_as (Run.matcher_token v0),
                      trans_image_alias (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_env_instruction ((kind, body) : mt) : CST.env_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_env (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Rep1_env_pair (
                  Run.repeat1
                    (fun v -> trans_env_pair (Run.matcher_token v))
                    v
                )
            | Alt (1, v) ->
                `Spaced_env_pair (
                  trans_spaced_env_pair (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_instruction ((kind, body) : mt) : CST.label_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_label (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_label_pair (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_instruction ((kind, body) : mt) : CST.instruction =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Choice_from_inst (
            (match v with
            | Alt (0, v) ->
                `From_inst (
                  trans_from_instruction (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Run_inst (
                  trans_run_instruction (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cmd_inst (
                  trans_cmd_instruction (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Label_inst (
                  trans_label_instruction (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Expose_inst (
                  trans_expose_instruction (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Env_inst (
                  trans_env_instruction (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Add_inst (
                  trans_add_instruction (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Copy_inst (
                  trans_copy_instruction (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Entr_inst (
                  trans_entrypoint_instruction (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Volume_inst (
                  trans_volume_instruction (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `User_inst (
                  trans_user_instruction (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Work_inst (
                  trans_workdir_instruction (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Arg_inst (
                  trans_arg_instruction (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `Onbu_inst (
                  trans_onbuild_instruction (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Stop_inst (
                  trans_stopsignal_instruction (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Heal_inst (
                  trans_healthcheck_instruction (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Shell_inst (
                  trans_shell_instruction (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Main_inst (
                  trans_maintainer_instruction (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Cross_build_inst (
                  trans_cross_build_instruction (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_onbuild_instruction ((kind, body) : mt) : CST.onbuild_instruction =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_pat_onbu (Run.matcher_token v0),
            trans_instruction (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_source_file ((kind, body) : mt) : CST.source_file =
  match body with
  | Children v ->
      Run.repeat
        (fun v ->
          (match v with
          | Seq [v0; v1] ->
              (
                (match v0 with
                | Alt (0, v) ->
                    `Inst (
                      trans_instruction (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Comm (
                      trans_comment (Run.matcher_token v)
                    )
                | _ -> assert false
                )
                ,
                Run.trans_token (Run.matcher_token v1)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let root_node = Run.remove_extras ~extras orig_root_node in
  let matched_tree = Run.match_tree children_regexps src root_node in
  let opt_program = Option.map trans_source_file matched_tree in
  Parsing_result.create src opt_program errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

